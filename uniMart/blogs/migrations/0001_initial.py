# Generated by Django 5.1.5 on 2025-03-02 16:55

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('hubs', '0003_hub_admin_hub_location'),
        ('utils', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('slug', models.SlugField()),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='posts', to='utils.category')),
                ('hub', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='posts', to='hubs.hub')),
                ('tags', models.ManyToManyField(blank=True, to='utils.tag')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='post_search_idx')],
                'unique_together': {('hub', 'slug')},
            },
        ),
        migrations.RunSQL(
            """
            CREATE FUNCTION update_post_search_vector() RETURNS trigger AS $$
            BEGIN
                NEW.search_vector := (
                    setweight(to_tsvector('english', NEW.title), 'A') ||
                    setweight(to_tsvector('english', NEW.content), 'B')
                );
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;

            CREATE TRIGGER post_search_vector_trigger
            BEFORE INSERT OR UPDATE OF title, content
            ON blogs_post
            FOR EACH ROW EXECUTE FUNCTION update_post_search_vector();
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS post_search_vector_trigger ON blogs_post;
            DROP FUNCTION IF EXISTS update_post_search_vector;
            """
        )
    ]
